generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Activity {
  id                         Int                       @id @default(autoincrement())
  activity                   String
  userId                     Int
  projectId                  Int?
  projectActivityId          Int?
  subDetailProjectActivityId Int?
  createdAt                  DateTime
  ProjectActivity            ProjectActivity?          @relation(fields: [projectActivityId], references: [projectActivityId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_projectActivityId_fkey")
  Project                    Project?                  @relation(fields: [projectId], references: [projectId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_projectId_fkey")
  SubDetailProjectActivity   SubDetailProjectActivity? @relation(fields: [subDetailProjectActivityId], references: [subDetailProjectActivityId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_subDetailProjectActivityId_fkey")
  User                       User                      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Activity_userId_fkey")

  @@index([projectActivityId], map: "Activity_projectActivityId_fkey")
  @@index([projectId], map: "Activity_projectId_fkey")
  @@index([subDetailProjectActivityId], map: "Activity_subDetailProjectActivityId_fkey")
  @@index([userId], map: "Activity_userId_fkey")
}

model Link {
  linkId      Int      @id @default(autoincrement())
  userId      Int
  createdAt   DateTime @default(now())
  description String   @db.VarChar(255)
  expiredAt   DateTime @default(dbgenerated("(current_timestamp() + interval 1 day)"))
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Link_userId_fkey")

  @@index([userId], map: "Link_userId_fkey")
}

model Project {
  projectId          Int               @id @default(autoincrement())
  projectName        String            @unique(map: "Project_projectName_key")
  projectDescription String            @db.Text
  deadline           DateTime?
  deadlineInString   String?
  userOwner          Int
  createdAt          DateTime?
  updatedAt          DateTime?
  User               User              @relation(fields: [userOwner], references: [id], onDelete: Cascade, map: "Project_userOwner_fkey")
  Activity           Activity[]
  ProjectActivity    ProjectActivity[]
  UserTeam           UserTeam[]

  @@index([userOwner], map: "Project_userOwner_fkey")
}

model ProjectActivity {
  projectActivityId        Int                        @id @default(autoincrement())
  projectId                Int
  name                     String
  critical                 Boolean?
  progress                 Float                      @default(0)
  position                 Position                   @default(To_Do)
  timeToComplete           Int
  status                   Boolean                    @default(false)
  description              String
  parent                   String?
  child                    String?
  createdAt                DateTime?
  updatedAt                DateTime?
  Project                  Project                    @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "ProjectActivity_projectId_fkey")
  Activity                 Activity[]
  SubDetailProjectActivity SubDetailProjectActivity[]
  UserTaskFromAssignee     UserTaskFromAssignee[]

  @@index([projectId], map: "ProjectActivity_projectId_fkey")
}

model Session {
  id        String   @id
  sid       String   @unique(map: "Session_sid_key")
  data      String
  expiresAt DateTime @default(dbgenerated("(current_timestamp() + interval 1 day)"))
}

model SubDetailProjectActivity {
  subDetailProjectActivityId Int             @id @default(autoincrement())
  detailProyekId             Int
  description                String
  isComplete                 Boolean         @default(false)
  createdAt                  DateTime?       @default(now())
  updatedAt                  DateTime?       @default(now())
  ProjectActivity            ProjectActivity @relation(fields: [detailProyekId], references: [projectActivityId], onDelete: Cascade, map: "SubDetailProjectActivity_detailProyekId_fkey")
  Activity                   Activity[]

  @@index([detailProyekId], map: "SubDetailProjectActivity_detailProyekId_fkey")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String?                @unique(map: "User_email_key")
  createdAt            DateTime?
  firstName            String?
  isActive             Boolean?               @default(false)
  lastName             String?
  password             String?
  updatedAt            DateTime?
  username             String?                @unique(map: "User_username_key")
  phoneNumber          String?
  Activity             Activity[]
  Links                Link[]
  Project              Project[]
  UserTaskFromAssignee UserTaskFromAssignee[]
  UserTeam             UserTeam[]
}

model UserTaskFromAssignee {
  idTask            Int             @id @default(autoincrement())
  idUser            Int
  projectActivityId Int
  createdAt         DateTime        @default(now())
  User              User            @relation(fields: [idUser], references: [id], onDelete: Cascade, map: "UserTaskFromAssignee_idUser_fkey")
  ProjectActivity   ProjectActivity @relation(fields: [projectActivityId], references: [projectActivityId], onDelete: Cascade, map: "UserTaskFromAssignee_projectActivityId_fkey")

  @@index([idUser], map: "UserTaskFromAssignee_idUser_fkey")
  @@index([projectActivityId], map: "UserTaskFromAssignee_projectActivityId_fkey")
}

model UserTeam {
  teamId    Int       @id @default(autoincrement())
  userId    Int
  projectId Int
  role      Role      @default(Tim)
  addedAt   DateTime? @default(now())
  Project   Project   @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "UserTeam_projectId_fkey")
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserTeam_userId_fkey")

  @@index([projectId], map: "UserTeam_projectId_fkey")
  @@index([userId], map: "UserTeam_userId_key")
}

enum Position {
  To_Do
  Doing
  Review
  Done
}

enum Role {
  Proyek_Manager
  Tim
}
