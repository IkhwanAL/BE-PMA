generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activity {
  id                         Int                       @id @default(autoincrement())
  activity                   String
  userId                     Int
  projectId                  Int?
  projectActivityId          Int?
  subDetailProjectActivityId Int?
  createdAt                  DateTime
  projectactivity            projectactivity?          @relation(fields: [projectActivityId], references: [projectActivityId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_projectActivityId_fkey")
  project                    project?                  @relation(fields: [projectId], references: [projectId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_projectId_fkey")
  subdetailprojectactivity   subdetailprojectactivity? @relation(fields: [subDetailProjectActivityId], references: [subDetailProjectActivityId], onDelete: NoAction, onUpdate: NoAction, map: "Activity_subDetailProjectActivityId_fkey")
  user                       user                      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Activity_userId_fkey")

  @@index([projectActivityId], map: "Activity_projectActivityId_fkey")
  @@index([projectId], map: "Activity_projectId_fkey")
  @@index([subDetailProjectActivityId], map: "Activity_subDetailProjectActivityId_fkey")
  @@index([userId], map: "Activity_userId_fkey")
}

model link {
  linkId      Int      @id @default(autoincrement())
  userId      Int
  createdAt   DateTime @default(now())
  description String   @db.VarChar(255)
  expiredAt   DateTime @default(dbgenerated("(current_timestamp() + interval 1 day)"))
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Link_userId_fkey")

  @@index([userId], map: "Link_userId_fkey")
}

model project {
  projectId          Int               @id @default(autoincrement())
  projectName        String            @unique(map: "Project_projectName_key")
  projectDescription String            @db.Text
  deadline           DateTime?
  deadlineInString   String?
  userOwner          Int
  createdAt          DateTime?
  updatedAt          DateTime?
  user               user              @relation(fields: [userOwner], references: [id], onDelete: Cascade, map: "Project_userOwner_fkey")
  activity           activity[]
  projectactivity    projectactivity[]
  userteam           userteam[]

  @@index([userOwner], map: "Project_userOwner_fkey")
}

model projectactivity {
  projectActivityId        Int                        @id @default(autoincrement())
  projectId                Int
  name                     String
  critical                 Boolean?
  progress                 Float                      @default(0)
  position                 projectactivity_position   @default(To_Do)
  timeToComplete           Int
  status                   Boolean                    @default(false)
  description              String
  parent                   String?
  child                    String?
  createdAt                DateTime?
  updatedAt                DateTime?
  project                  project                    @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "ProjectActivity_projectId_fkey")
  activity                 activity[]
  subdetailprojectactivity subdetailprojectactivity[]
  usertaskfromassignee     usertaskfromassignee[]

  @@index([projectId], map: "ProjectActivity_projectId_fkey")
}

model session {
  id        String   @id
  sid       String   @unique(map: "Session_sid_key")
  data      String
  expiresAt DateTime @default(dbgenerated("(current_timestamp() + interval 1 day)"))
}

model subdetailprojectactivity {
  subDetailProjectActivityId Int             @id @default(autoincrement())
  detailProyekId             Int
  description                String
  isComplete                 Boolean         @default(false)
  createdAt                  DateTime?       @default(now())
  updatedAt                  DateTime?       @default(now())
  projectactivity            projectactivity @relation(fields: [detailProyekId], references: [projectActivityId], onDelete: Cascade, map: "SubDetailProjectActivity_detailProyekId_fkey")
  activity                   activity[]

  @@index([detailProyekId], map: "SubDetailProjectActivity_detailProyekId_fkey")
}

model user {
  id                   Int                    @id @default(autoincrement())
  email                String?                @unique(map: "User_email_key")
  createdAt            DateTime?
  firstName            String?
  isActive             Boolean?               @default(false)
  lastName             String?
  password             String?
  updatedAt            DateTime?
  username             String?                @unique(map: "User_username_key")
  phoneNumber          String?
  activity             activity[]
  link                 link[]
  project              project[]
  usertaskfromassignee usertaskfromassignee[]
  userteam             userteam[]
}

model usertaskfromassignee {
  idTask            Int             @id @default(autoincrement())
  idUser            Int
  projectActivityId Int
  createdAt         DateTime        @default(now())
  user              user            @relation(fields: [idUser], references: [id], onDelete: Cascade, map: "UserTaskFromAssignee_idUser_fkey")
  projectactivity   projectactivity @relation(fields: [projectActivityId], references: [projectActivityId], onDelete: Cascade, map: "UserTaskFromAssignee_projectActivityId_fkey")

  @@index([idUser], map: "UserTaskFromAssignee_idUser_fkey")
  @@index([projectActivityId], map: "UserTaskFromAssignee_projectActivityId_fkey")
}

model userteam {
  teamId    Int           @id @default(autoincrement())
  userId    Int
  projectId Int
  role      userteam_role @default(Tim)
  addedAt   DateTime?     @default(now())
  project   project       @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "UserTeam_projectId_fkey")
  user      user          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserTeam_userId_fkey")

  @@index([projectId], map: "UserTeam_projectId_fkey")
  @@index([userId], map: "UserTeam_userId_key")
}

enum projectactivity_position {
  To_Do
  Doing
  Review
  Done
}

enum userteam_role {
  Proyek_Manager
  Tim
}
